========================================
Spark Docker Launcher
========================================
Which Spark version?
[1] Spark 4.0 (Scala shell)
[2] Spark 2.4 (baseline)

Enter 1 or 2: 2

You selected: 2

Docker CLI found

[STEP 2] Checking if Docker Desktop is running...
Docker Desktop is already running.

[STEP 3] Starting Spark environment...
DEBUG: Testing basic docker command...
Docker version 28.1.1, build 4eba377
Starting Spark 2.4...
Using compose file: docker\docker-compose.yml

========================================
[STEP A] Starting all Spark services...
========================================
[+] Running 4/4
 ✔ Container spark-master   Running                                                          0.0s
 ✔ Container spark-4.0-env  Running                                                          0.0s
 ✔ Container spark-worker   Running                                                          0.0s
 ✔ Container spark-2.4-env  Running                                                          0.0s
Spark services are running in the background.

Waiting for Spark master to be ready...
Checking Spark master status...
22 Master
Spark Master is running
Testing network connectivity...
PING spark-master (172.18.0.2) 56(84) bytes of data.
64 bytes from spark-master.docker_sparknet (172.18.0.2): icmp_seq=1 ttl=64 time=0.448 ms

--- spark-master ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.448/0.448/0.448/0.000 ms
Network connectivity OK
Restarting worker to clear old executors...
Restarting Spark 2.4 driver container...
========================================
[STEP B] Connecting to the Spark 2.4 Scala shell...
========================================
25/07/02 22:00:16 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Spark context Web UI available at http://270ba1b46869:4040
Spark context available as 'sc' (master = spark://spark-master:7077, app id = app-20250702220020-0028).
Spark session available as 'spark'.
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 2.4.8
      /_/

Using Scala version 2.11.12 (OpenJDK 64-Bit Server VM, Java 1.8.0_342)
Type in expressions to have them evaluated.
Type :help for more information.

scala> :load /workspace/src/scala/SuADMM.scala
Loading /workspace/src/scala/SuADMM.scala...
import org.apache.spark.sql.SparkSession
import org.apache.spark.SparkContext
import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.storage.StorageLevel
import breeze.linalg.{DenseVector, norm}
import breeze.numerics.sqrt
import breeze.optimize.{DiffFunction, LBFGS}
import java.io.PrintWriter
defined class ADMMState
defined trait ADMMUpdater
defined class SquaredL2Updater
defined class ADMMOptimizer
defined class GeneralizedLinearAlgorithm
defined class LogisticRegressionWithADMM
defined object ADMMRunner
listDatasets: ()Unit
runADMM: (filename: String, numPartitions: Int, lambda: Double, maxIterations: Int, outputPath: String)breeze.linalg.DenseVector[Double]
runADMM_Interactive: ()breeze.linalg.DenseVector[Double]
testADMM: (filename: String)breeze.linalg.DenseVector[Double]
runADMM_RCV1_Full: (numPartitions: Int)breeze.linalg.DenseVector[Double]
compareRCV1_Datasets: ()Unit
datasetInfo: (filename: String)Unit
calculateAccuracy: (testData: org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])], model: breeze.linalg.DenseVector[Double])Double
splitTrainTest: (data: org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])], trainRatio: Double)(org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])], org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])])
runADMM_WithAccuracy: (filename: String, sampleRatio: Double, numPartitions: Int, lambda: Double, maxIterations: Int, trainRatio: Double)Unit
runADMM_ScaledDown: (filename: String)Unit

scala> runADMM_WithAccuracy()
Loading LibSVM data from: /workspace/data/sourced/rcv1_5percent_sample.dat
Using Su's paper methodology with proper RCV1 sample (5% subset with real -1/+1 labels)
Dataset: 10000 samples, 47236 features (RCV1 5% sample with proper labels)
Train: 8008 samples, Test: 1992 samples
Training label distribution: Map(-1.0 -> 3821, 1.0 -> 4187)

============================================================
STARTING ADMM TRAINING (Su's Paper Methodology with Real Labels)
============================================================
Running ADMM with 8 partitions, 47236 features.
Lambda: 0.01, Max Iterations: 50

--- Iteration: 1 ---
Primal Residual: 0.042351, Primal Tolerance: 0.000029
Dual Residual:   0.089265 (for monitoring only)
New Rho: 1.0

--- Iteration: 2 ---
Primal Residual: 0.000229, Primal Tolerance: 0.000030
Dual Residual:   0.088931 (for monitoring only)
New Rho: 0.5

--- Iteration: 3 ---
Primal Residual: 0.042073, Primal Tolerance: 0.000032
Dual Residual:   0.088116 (for monitoring only)
New Rho: 0.5

--- Iteration: 4 ---
Primal Residual: 0.000898, Primal Tolerance: 0.000034
Dual Residual:   0.087382 (for monitoring only)
New Rho: 0.25

--- Iteration: 5 ---
Primal Residual: 0.083715, Primal Tolerance: 0.000037
Dual Residual:   0.085853 (for monitoring only)
New Rho: 0.25

--- Iteration: 6 ---
Primal Residual: 0.003471, Primal Tolerance: 0.000040
Dual Residual:   0.084443 (for monitoring only)
New Rho: 0.125

--- Iteration: 7 ---
Primal Residual: 0.166072, Primal Tolerance: 0.000047
Dual Residual:   0.081530 (for monitoring only)
New Rho: 0.125

--- Iteration: 8 ---
Primal Residual: 0.012969, Primal Tolerance: 0.000053
Dual Residual:   0.078929 (for monitoring only)
New Rho: 0.125

--- Iteration: 9 ---
Primal Residual: 0.012565, Primal Tolerance: 0.000059
Dual Residual:   0.076329 (for monitoring only)
New Rho: 0.125

--- Iteration: 10 ---
Primal Residual: 0.012154, Primal Tolerance: 0.000065
Dual Residual:   0.073825 (for monitoring only)
New Rho: 0.125

--- Iteration: 11 ---
Primal Residual: 0.011752, Primal Tolerance: 0.000071
Dual Residual:   0.071412 (for monitoring only)
New Rho: 0.125

--- Iteration: 12 ---
Primal Residual: 0.011366, Primal Tolerance: 0.000077
Dual Residual:   0.069088 (for monitoring only)
New Rho: 0.125

--- Iteration: 13 ---
Primal Residual: 0.010993, Primal Tolerance: 0.000082
Dual Residual:   0.066849 (for monitoring only)
New Rho: 0.125

--- Iteration: 14 ---
Primal Residual: 0.010635, Primal Tolerance: 0.000087
Dual Residual:   0.064691 (for monitoring only)
New Rho: 0.125

--- Iteration: 15 ---
Primal Residual: 0.010289, Primal Tolerance: 0.000092
Dual Residual:   0.062612 (for monitoring only)
New Rho: 0.125

--- Iteration: 16 ---
Primal Residual: 0.009956, Primal Tolerance: 0.000097
Dual Residual:   0.060608 (for monitoring only)
New Rho: 0.125

--- Iteration: 17 ---
Primal Residual: 0.009635, Primal Tolerance: 0.000102
Dual Residual:   0.058677 (for monitoring only)
New Rho: 0.125

--- Iteration: 18 ---
Primal Residual: 0.009326, Primal Tolerance: 0.000106
Dual Residual:   0.056814 (for monitoring only)
New Rho: 0.125

--- Iteration: 19 ---
Primal Residual: 0.009028, Primal Tolerance: 0.000111
Dual Residual:   0.055018 (for monitoring only)
New Rho: 0.125

--- Iteration: 20 ---
Primal Residual: 0.008741, Primal Tolerance: 0.000115
Dual Residual:   0.053286 (for monitoring only)
New Rho: 0.125

--- Iteration: 21 ---
Primal Residual: 0.008464, Primal Tolerance: 0.000119
Dual Residual:   0.051615 (for monitoring only)
New Rho: 0.125

--- Iteration: 22 ---
Primal Residual: 0.008197, Primal Tolerance: 0.000123
Dual Residual:   0.050002 (for monitoring only)
New Rho: 0.125

--- Iteration: 23 ---
Primal Residual: 0.007939, Primal Tolerance: 0.000127
Dual Residual:   0.048446 (for monitoring only)
New Rho: 0.125

--- Iteration: 24 ---
Primal Residual: 0.007691, Primal Tolerance: 0.000131
Dual Residual:   0.046945 (for monitoring only)
New Rho: 0.125

--- Iteration: 25 ---
Primal Residual: 0.007451, Primal Tolerance: 0.000134
Dual Residual:   0.045495 (for monitoring only)
New Rho: 0.125

--- Iteration: 26 ---
Primal Residual: 0.007219, Primal Tolerance: 0.000138
Dual Residual:   0.044095 (for monitoring only)
New Rho: 0.125

--- Iteration: 27 ---
Primal Residual: 0.006996, Primal Tolerance: 0.000141
Dual Residual:   0.042743 (for monitoring only)
New Rho: 0.125

--- Iteration: 28 ---
Primal Residual: 0.006780, Primal Tolerance: 0.000144
Dual Residual:   0.041437 (for monitoring only)
New Rho: 0.125

--- Iteration: 29 ---
Primal Residual: 0.006572, Primal Tolerance: 0.000148
Dual Residual:   0.040175 (for monitoring only)
New Rho: 0.125

--- Iteration: 30 ---
Primal Residual: 0.006371, Primal Tolerance: 0.000151
Dual Residual:   0.038955 (for monitoring only)
New Rho: 0.125

--- Iteration: 31 ---
Primal Residual: 0.006177, Primal Tolerance: 0.000154
Dual Residual:   0.037777 (for monitoring only)
New Rho: 0.125

--- Iteration: 32 ---
Primal Residual: 0.005989, Primal Tolerance: 0.000157
Dual Residual:   0.036638 (for monitoring only)
New Rho: 0.125

--- Iteration: 33 ---
Primal Residual: 0.005808, Primal Tolerance: 0.000159
Dual Residual:   0.035537 (for monitoring only)
New Rho: 0.125

--- Iteration: 34 ---
Primal Residual: 0.005632, Primal Tolerance: 0.000162
Dual Residual:   0.034472 (for monitoring only)
New Rho: 0.125

--- Iteration: 35 ---
Primal Residual: 0.005463, Primal Tolerance: 0.000165
Dual Residual:   0.033442 (for monitoring only)
New Rho: 0.125

--- Iteration: 36 ---
Primal Residual: 0.005299, Primal Tolerance: 0.000167
Dual Residual:   0.032446 (for monitoring only)
New Rho: 0.125

--- Iteration: 37 ---
Primal Residual: 0.005140, Primal Tolerance: 0.000170
Dual Residual:   0.031483 (for monitoring only)
New Rho: 0.125

--- Iteration: 38 ---
Primal Residual: 0.004987, Primal Tolerance: 0.000172
Dual Residual:   0.030550 (for monitoring only)
New Rho: 0.125

--- Iteration: 39 ---
Primal Residual: 0.004839, Primal Tolerance: 0.000175
Dual Residual:   0.029648 (for monitoring only)
New Rho: 0.125

--- Iteration: 40 ---
Primal Residual: 0.004696, Primal Tolerance: 0.000177
Dual Residual:   0.028775 (for monitoring only)
New Rho: 0.125

--- Iteration: 41 ---
Primal Residual: 0.004557, Primal Tolerance: 0.000179
Dual Residual:   0.027930 (for monitoring only)
New Rho: 0.125

--- Iteration: 42 ---
Primal Residual: 0.004423, Primal Tolerance: 0.000181
Dual Residual:   0.027112 (for monitoring only)
New Rho: 0.125

--- Iteration: 43 ---
Primal Residual: 0.004293, Primal Tolerance: 0.000183
Dual Residual:   0.026320 (for monitoring only)
New Rho: 0.125

--- Iteration: 44 ---
Primal Residual: 0.004167, Primal Tolerance: 0.000185
Dual Residual:   0.025552 (for monitoring only)
New Rho: 0.125

--- Iteration: 45 ---
Primal Residual: 0.004045, Primal Tolerance: 0.000187
Dual Residual:   0.024810 (for monitoring only)
New Rho: 0.125

--- Iteration: 46 ---
Primal Residual: 0.003927, Primal Tolerance: 0.000189
Dual Residual:   0.024090 (for monitoring only)
New Rho: 0.125

--- Iteration: 47 ---
Primal Residual: 0.003813, Primal Tolerance: 0.000191
Dual Residual:   0.023393 (for monitoring only)
New Rho: 0.125

--- Iteration: 48 ---
Primal Residual: 0.003702, Primal Tolerance: 0.000193
Dual Residual:   0.022718 (for monitoring only)
New Rho: 0.125

--- Iteration: 49 ---
Primal Residual: 0.003595, Primal Tolerance: 0.000195
Dual Residual:   0.022064 (for monitoring only)
New Rho: 0.125

--- Iteration: 50 ---
Primal Residual: 0.003491, Primal Tolerance: 0.000196
Dual Residual:   0.021430 (for monitoring only)
New Rho: 0.125

Convergence reached after 50 iterations.

Model Analysis:
Model L2 norm: 5.94388462260739
Non-zero weights: 29038 / 47236
25/07/02 22:07:12 WARN BLAS: Failed to load implementation from: com.github.fommil.netlib.NativeSystemBLAS
25/07/02 22:07:12 WARN BLAS: Failed to load implementation from: com.github.fommil.netlib.NativeRefBLAS

Sample Predictions:
Actual: 1.0, Raw: 0.266323, Prob: 0.566190, Predicted: 1.0
Actual: 1.0, Raw: 0.580549, Prob: 0.641194, Predicted: 1.0
Actual: 1.0, Raw: 0.126000, Prob: 0.531458, Predicted: 1.0
Actual: -1.0, Raw: -0.077563, Prob: 0.480619, Predicted: -1.0
Actual: 1.0, Raw: 0.312311, Prob: 0.577449, Predicted: 1.0

============================================================
ADMM RESULTS WITH PROPER RCV1 DATA
============================================================
Dataset: rcv1_5percent_sample.dat (RCV1 5% sample with real labels)
Samples: 10000 (Train: 8008, Test: 1992)
Features: 47236
Runtime: 347.9 seconds
Accuracy: 93.22% (Target: 98.17% from Su's paper)
Parameters: λ=0.01, MaxIters=50, Partitions=8
============================================================
Model saved to: /workspace/data/generated/rcv1_5percent_sample_admm_model.txt

scala>
