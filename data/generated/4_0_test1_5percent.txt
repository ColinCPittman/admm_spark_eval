========================================
Spark Docker Launcher
========================================
Which Spark version?
[1] Spark 4.0 (Scala shell)
[2] Spark 2.4 (baseline)

Enter 1 or 2: 1

You selected: 1

Docker CLI found

[STEP 2] Checking if Docker Desktop is running...
Docker Desktop is already running.

[STEP 3] Starting Spark environment...
DEBUG: Testing basic docker command...
Docker version 28.1.1, build 4eba377
Starting Spark 4.0 Scala shell...
Using compose file: docker\docker-compose.yml

========================================
[STEP A] Starting all Spark 4.0 services...
========================================
[+] Running 3/3
 ✔ Container spark-master-40  Running                                                          0.0s
 ✔ Container spark-worker-40  Running                                                          0.0s
 ✔ Container spark-4.0-env    Running                                                          0.0s
Spark 4.0 services are running in the background.

Waiting for Spark 4.0 master to be ready...
Checking Spark 4.0 master status...
18 Master
Spark 4.0 Master is running
Testing network connectivity...
PING spark-master-40 (172.18.0.2) 56(84) bytes of data.
64 bytes from spark-master-40.docker_sparknet (172.18.0.2): icmp_seq=1 ttl=64 time=0.046 ms

--- spark-master-40 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 0.046/0.046/0.046/0.000 ms
Network connectivity OK
Restarting worker to clear old executors...
Restarting Spark 4.0 driver container...
========================================
[STEP B] Connecting to the Spark 4.0 Scala shell...
========================================
WARNING: Using incubator modules: jdk.incubator.vector
Using Spark's default log4j profile: org/apache/spark/log4j2-defaults.properties
Setting default log level to "WARN".
To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).
Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _\ \/ _ \/ _ `/ __/  '_/
   /___/ .__/\_,_/_/ /_/\_\   version 4.0.0
      /_/

Using Scala version 2.13.16 (OpenJDK 64-Bit Server VM, Java 17.0.2)
Type in expressions to have them evaluated.
Type :help for more information.
25/07/04 01:17:12 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Spark context Web UI available at http://f2ad9439b2a7:4040
Spark context available as 'sc' (master = spark://spark-master-40:7077, app id = app-20250704011713-0001).
Spark session available as 'spark'.

scala> :load /workspace/src/scala/SuADMM_40.scala
val args: Array[String] = Array()
Loading /workspace/src/scala/SuADMM_40.scala...
import org.apache.spark.sql.SparkSession
import org.apache.spark.SparkContext
import org.apache.spark.rdd.RDD
import org.apache.spark.mllib.util.MLUtils
import org.apache.spark.storage.StorageLevel
import breeze.linalg.{DenseVector, norm}
import breeze.numerics.sqrt
import breeze.optimize.{DiffFunction, LBFGS}
import java.io.PrintWriter
class ADMMState_40
trait ADMMUpdater_40
class SquaredL2Updater_40
warning: 1 deprecation (since 2.13.3); for details, enable `:setting -deprecation` or `:replay -deprecation`
class ADMMOptimizer_40
class GeneralizedLinearAlgorithm_40
class LogisticRegressionWithADMM_40
warning: 1 deprecation (since 2.13.3); for details, enable `:setting -deprecation` or `:replay -deprecation`
object ADMMRunner_40
def listDatasets_40(): Unit
def runADMM_40(filename: String, numPartitions: Int, lambda: Double, maxIterations: Int, outputPath: String): breeze.linalg.DenseVector[Double]
def runADMM_Interactive_40(): breeze.linalg.DenseVector[Double]
def testADMM_40(filename: String): breeze.linalg.DenseVector[Double]
def runADMM_RCV1_Full_40(numPartitions: Int): breeze.linalg.DenseVector[Double]
def compareRCV1_Datasets_40(): Unit
def datasetInfo_40(filename: String): Unit
def calculateAccuracy_40(testData: org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])], model: breeze.linalg.DenseVector[Double]): Double
def splitTrainTest_40(data: org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])], trainRatio: Double): (org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])], org.apache.spark.rdd.RDD[(Double, breeze.linalg.DenseVector[Double])])
def runADMM_WithAccuracy_40(filename: String, sampleRatio: Double, numPartitions: Int, lambda: Double, maxIterations: Int, trainRatio: Double): Unit
def runADMM_Spark40_Test(filename: String): Unit
warning: 3 deprecations (since 2.12.16); for details, enable `:setting -deprecation` or `:replay -deprecation`
def runADMM_ScaledDown_40(filename: String): Unit

scala> runADMM_WithAccuracy_40()
Loading LibSVM data from: /workspace/data/sourced/rcv1_5percent_sample.dat
Using Su's paper methodology with proper RCV1 sample (5% subset with real -1/+1 labels)
Dataset: 10000 samples, 47236 features (RCV1 5% sample with proper labels)
Train: 8046 samples, Test: 1954 samples
Training label distribution: Map(-1.0 -> 3820, 1.0 -> 4226)

============================================================
STARTING ADMM TRAINING (Su's Paper Methodology with Real Labels)
============================================================
Running ADMM with 8 partitions, 47236 features.
Lambda: 0.01, Max Iterations: 50

--- Iteration: 1 ---
25/07/04 01:18:38 WARN DAGScheduler: Broadcasting large task binary with size 1486.9 KiB
25/07/04 01:18:44 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.040752, Primal Tolerance: 0.002926
Dual Residual:   0.088444 (for monitoring only)
New Rho: 1.0

--- Iteration: 2 ---
25/07/04 01:18:44 WARN DAGScheduler: Broadcasting large task binary with size 1487.8 KiB
25/07/04 01:18:49 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.000226, Primal Tolerance: 0.003005
Dual Residual:   0.088115 (for monitoring only)
New Rho: 0.5

--- Iteration: 3 ---
25/07/04 01:18:49 WARN DAGScheduler: Broadcasting large task binary with size 1488.6 KiB
25/07/04 01:18:54 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.040493, Primal Tolerance: 0.003183
Dual Residual:   0.087312 (for monitoring only)
New Rho: 0.5

--- Iteration: 4 ---
25/07/04 01:18:54 WARN DAGScheduler: Broadcasting large task binary with size 1489.3 KiB
25/07/04 01:18:59 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.000886, Primal Tolerance: 0.003354
Dual Residual:   0.086588 (for monitoring only)
New Rho: 0.25

--- Iteration: 5 ---
25/07/04 01:18:59 WARN DAGScheduler: Broadcasting large task binary with size 1490.1 KiB
25/07/04 01:19:03 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.080656, Primal Tolerance: 0.003703
Dual Residual:   0.085086 (for monitoring only)
New Rho: 0.25

--- Iteration: 6 ---
25/07/04 01:19:04 WARN DAGScheduler: Broadcasting large task binary with size 1490.8 KiB
25/07/04 01:19:08 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.003424, Primal Tolerance: 0.004031
Dual Residual:   0.083695 (for monitoring only)
New Rho: 0.125

--- Iteration: 7 ---
25/07/04 01:19:08 WARN DAGScheduler: Broadcasting large task binary with size 1491.6 KiB
25/07/04 01:19:13 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.160308, Primal Tolerance: 0.004706
Dual Residual:   0.080832 (for monitoring only)
New Rho: 0.125

--- Iteration: 8 ---
25/07/04 01:19:13 WARN DAGScheduler: Broadcasting large task binary with size 1492.3 KiB
25/07/04 01:19:18 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.012793, Primal Tolerance: 0.005313
Dual Residual:   0.078265 (for monitoring only)
New Rho: 0.125

--- Iteration: 9 ---
25/07/04 01:19:18 WARN DAGScheduler: Broadcasting large task binary with size 1493.1 KiB
25/07/04 01:19:23 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.012430, Primal Tolerance: 0.005918
Dual Residual:   0.075704 (for monitoring only)
New Rho: 0.125

--- Iteration: 10 ---
25/07/04 01:19:23 WARN DAGScheduler: Broadcasting large task binary with size 1493.8 KiB
25/07/04 01:19:28 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.012025, Primal Tolerance: 0.006504
Dual Residual:   0.073236 (for monitoring only)
New Rho: 0.125

--- Iteration: 11 ---
25/07/04 01:19:28 WARN DAGScheduler: Broadcasting large task binary with size 1494.6 KiB
25/07/04 01:19:33 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.011631, Primal Tolerance: 0.007070
Dual Residual:   0.070859 (for monitoring only)
New Rho: 0.125

--- Iteration: 12 ---
25/07/04 01:19:33 WARN DAGScheduler: Broadcasting large task binary with size 1495.3 KiB
25/07/04 01:19:38 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.011251, Primal Tolerance: 0.007618
Dual Residual:   0.068568 (for monitoring only)
New Rho: 0.125

--- Iteration: 13 ---
25/07/04 01:19:38 WARN DAGScheduler: Broadcasting large task binary with size 1496.1 KiB
25/07/04 01:19:43 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.010885, Primal Tolerance: 0.008148
Dual Residual:   0.066360 (for monitoring only)
New Rho: 0.125

--- Iteration: 14 ---
25/07/04 01:19:43 WARN DAGScheduler: Broadcasting large task binary with size 1496.8 KiB
25/07/04 01:19:48 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.010532, Primal Tolerance: 0.008662
Dual Residual:   0.064232 (for monitoring only)
New Rho: 0.125

--- Iteration: 15 ---
25/07/04 01:19:48 WARN DAGScheduler: Broadcasting large task binary with size 1497.6 KiB
25/07/04 01:19:53 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.010193, Primal Tolerance: 0.009158
Dual Residual:   0.062180 (for monitoring only)
New Rho: 0.125

--- Iteration: 16 ---
25/07/04 01:19:53 WARN DAGScheduler: Broadcasting large task binary with size 1498.3 KiB
25/07/04 01:19:58 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.009865, Primal Tolerance: 0.009639
Dual Residual:   0.060203 (for monitoring only)
New Rho: 0.125

--- Iteration: 17 ---
25/07/04 01:19:58 WARN DAGScheduler: Broadcasting large task binary with size 1499.1 KiB
25/07/04 01:20:03 WARN DAGScheduler: Broadcasting large task binary with size 2.2 MiB
Primal Residual: 0.009550, Primal Tolerance: 0.010105
Dual Residual:   0.058296 (for monitoring only)
New Rho: 0.125

Convergence reached after 17 iterations.

Model Analysis:
Model L2 norm: 2.5693102332642184
Non-zero weights: 29077 / 47236
25/07/04 01:20:04 WARN InstanceBuilder: Failed to load implementation from:dev.ludovic.netlib.blas.JNIBLAS

Sample Predictions:
Actual: 1.0, Raw: 0.118440, Prob: 0.529576, Predicted: 1.0
Actual: 1.0, Raw: 0.107787, Prob: 0.526921, Predicted: 1.0
Actual: 1.0, Raw: -0.011203, Prob: 0.497199, Predicted: -1.0
Actual: -1.0, Raw: -0.006692, Prob: 0.498327, Predicted: -1.0
Actual: -1.0, Raw: -0.136359, Prob: 0.465963, Predicted: -1.0

============================================================
ADMM RESULTS WITH PROPER RCV1 DATA
============================================================
Dataset: rcv1_5percent_sample.dat (RCV1 5% sample with real labels)
Samples: 10000 (Train: 8046, Test: 1954)
Features: 47236
Runtime: 88.2 seconds
Accuracy: 93.55% (Target: 98.17% from Su's paper)
Parameters: λ=0.01, MaxIters=50, Partitions=8
============================================================
Model saved to: /workspace/data/generated/rcv1_5percent_sample_admm_model.txt

scala>
